#include "oled.h"

#include <stdlib.h>
#include "Arduino.h"
#include <Wire.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include "i2c_avr.h"

oled::oled(i2c_avr &i) : i2c(i) { }

void oled::init(uint16_t addr){
  address = addr;

  send_cmd(0xae);    //display off
  send_cmd(0x2e);    //deactivate scrolling
  send_cmd(0xa4);          //SET All pixels OFF
//  send_cmd(0xa5);            //SET ALL pixels ON
  delay(50);
  send_cmd(0x20);            //Set Memory Addressing Mode
  send_cmd(0x02);            //Set Memory Addressing Mode to Page addressing mode(RESET)
//  send_cmd(0xa0);      //colum address 0 mapped to SEG0 (POR)*** wires at bottom
  send_cmd(0xa1);    //colum address 127 mapped to SEG0 (POR) ** wires at top of board
//  send_cmd(0xC0);            // Scan from Right to Left (POR)         *** wires at bottom
  send_cmd(0xC8);          // Scan from Left to Right               ** wires at top
  send_cmd(0xa6);            // Set WHITE chars on BLACK backround

//  send_cmd(0xa7);            // Set BLACK chars on WHITE backround
  send_cmd(0x81);            // 81 Setup CONTRAST CONTROL, following byte is the contrast Value
  send_cmd(0xff);            // af contrast value between 1 ( == dull) to 256 ( == bright)
  delay(20);
  send_cmd(0xaf);          //display on
  delay(20);
}

void oled::send_cmd(uint8_t command) {
  i2c.setSpeed(400000L);
  i2c.writeReg(address, 0x80, (uint8_t)command);
}

void oled::send_byte(uint8_t val) {
  i2c.setSpeed(400000L);
  i2c.writeReg(address, 0x40, (uint8_t)val);
}

void oled::clear_display() {
  unsigned char i,k;
  for(k=0;k<8;k++) {	
    setXY(k,0);    
    for(i=0;i<128;i++) {    //clear all COL
      send_byte(0);          //clear all COL
      //delay(10);
    }
  }
}

void oled::setXY(uint16_t row, uint16_t col) {
  send_cmd(0xb0+row);                //set page address
  send_cmd(0x00+(8*col&0x0f));       //set low col address
  send_cmd(0x10+((8*col>>4)&0x0f));  //set high col address
}

void oled::drawChar(char c) {
  for (uint8_t i=0; i<7; i++) {
    uint8_t b = pgm_read_byte_near(font_7x + ((c - 32) * 7) + i);
    send_byte(b);
  }
}

void oled::sendStr(char *string) {
  unsigned char i=0;
  while (*string) {
    drawChar(*string);
    *string++;
  }
}

#include <stdarg.h>
void oled::print(char *fmt, ... ) {
  char buf[128]; // resulting string limited to 128 chars
  va_list args;
  va_start (args, fmt );
  vsnprintf(buf, 128, fmt, args);
  va_end (args);
  sendStr(buf);
}

uint8_t oled::font_7x[] PROGMEM = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x5F,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x00,0x07,0x00,0x00,0x00,
  0x14,0x7F,0x14,0x7F,0x14,0x00,0x00,
  0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00,
  0x23,0x13,0x08,0x64,0x62,0x00,0x00,
  0x36,0x49,0x55,0x22,0x50,0x00,0x00,
  0x00,0x05,0x03,0x00,0x00,0x00,0x00,
  0x1C,0x22,0x41,0x00,0x00,0x00,0x00,
  0x41,0x22,0x1C,0x00,0x00,0x00,0x00,
  0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00,
  0x08,0x08,0x3E,0x08,0x08,0x00,0x00,
  0xA0,0x60,0x00,0x00,0x00,0x00,0x00,
  0x08,0x08,0x08,0x08,0x08,0x00,0x00,
  0x60,0x60,0x00,0x00,0x00,0x00,0x00,
  0x20,0x10,0x08,0x04,0x02,0x00,0x00,
  0x3E,0x51,0x49,0x45,0x3E,0x00,0x00,
  0x00,0x42,0x7F,0x40,0x00,0x00,0x00,
  0x62,0x51,0x49,0x49,0x46,0x00,0x00,
  0x22,0x41,0x49,0x49,0x36,0x00,0x00,
  0x18,0x14,0x12,0x7F,0x10,0x00,0x00,
  0x27,0x45,0x45,0x45,0x39,0x00,0x00,
  0x3C,0x4A,0x49,0x49,0x30,0x00,0x00,
  0x01,0x71,0x09,0x05,0x03,0x00,0x00,
  0x36,0x49,0x49,0x49,0x36,0x00,0x00,
  0x06,0x49,0x49,0x29,0x1E,0x00,0x00,
  0x00,0x36,0x36,0x00,0x00,0x00,0x00,
  0x00,0xAC,0x6C,0x00,0x00,0x00,0x00,
  0x08,0x14,0x22,0x41,0x00,0x00,0x00,
  0x14,0x14,0x14,0x14,0x14,0x00,0x00,
  0x41,0x22,0x14,0x08,0x00,0x00,0x00,
  0x02,0x01,0x51,0x09,0x06,0x00,0x00,
  0x32,0x49,0x79,0x41,0x3E,0x00,0x00,
  0x7E,0x09,0x09,0x09,0x7E,0x00,0x00,
  0x7F,0x49,0x49,0x49,0x36,0x00,0x00,
  0x3E,0x41,0x41,0x41,0x22,0x00,0x00,
  0x7F,0x41,0x41,0x22,0x1C,0x00,0x00,
  0x7F,0x49,0x49,0x49,0x41,0x00,0x00,
  0x7F,0x09,0x09,0x09,0x01,0x00,0x00,
  0x3E,0x41,0x41,0x51,0x72,0x00,0x00,
  0x7F,0x08,0x08,0x08,0x7F,0x00,0x00,
  0x41,0x7F,0x41,0x00,0x00,0x00,0x00,
  0x20,0x40,0x41,0x3F,0x01,0x00,0x00,
  0x7F,0x08,0x14,0x22,0x41,0x00,0x00,
  0x7F,0x40,0x40,0x40,0x40,0x00,0x00,
  0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00,
  0x7F,0x04,0x08,0x10,0x7F,0x00,0x00,
  0x3E,0x41,0x41,0x41,0x3E,0x00,0x00,
  0x7F,0x09,0x09,0x09,0x06,0x00,0x00,
  0x3E,0x41,0x51,0x21,0x5E,0x00,0x00,
  0x7F,0x09,0x19,0x29,0x46,0x00,0x00,
  0x26,0x49,0x49,0x49,0x32,0x00,0x00,
  0x01,0x01,0x7F,0x01,0x01,0x00,0x00,
  0x3F,0x40,0x40,0x40,0x3F,0x00,0x00,
  0x1F,0x20,0x40,0x20,0x1F,0x00,0x00,
  0x3F,0x40,0x38,0x40,0x3F,0x00,0x00,
  0x63,0x14,0x08,0x14,0x63,0x00,0x00,
  0x03,0x04,0x78,0x04,0x03,0x00,0x00,
  0x61,0x51,0x49,0x45,0x43,0x00,0x00,
  0x7F,0x41,0x41,0x00,0x00,0x00,0x00,
  0x02,0x04,0x08,0x10,0x20,0x00,0x00,
  0x41,0x41,0x7F,0x00,0x00,0x00,0x00,
  0x04,0x02,0x01,0x02,0x04,0x00,0x00,
  0x80,0x80,0x80,0x80,0x80,0x00,0x00,
  0x01,0x02,0x04,0x00,0x00,0x00,0x00,
  0x20,0x54,0x54,0x54,0x78,0x00,0x00,
  0x7F,0x48,0x44,0x44,0x38,0x00,0x00,
  0x38,0x44,0x44,0x28,0x00,0x00,0x00,
  0x38,0x44,0x44,0x48,0x7F,0x00,0x00,
  0x38,0x54,0x54,0x54,0x18,0x00,0x00,
  0x08,0x7E,0x09,0x02,0x00,0x00,0x00,
  0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00,
  0x7F,0x08,0x04,0x04,0x78,0x00,0x00,
  0x00,0x7D,0x00,0x00,0x00,0x00,0x00,
  0x80,0x84,0x7D,0x00,0x00,0x00,0x00,
  0x7F,0x10,0x28,0x44,0x00,0x00,0x00,
  0x41,0x7F,0x40,0x00,0x00,0x00,0x00,
  0x7C,0x04,0x18,0x04,0x78,0x00,0x00,
  0x7C,0x08,0x04,0x7C,0x00,0x00,0x00,
  0x38,0x44,0x44,0x38,0x00,0x00,0x00,
  0xFC,0x24,0x24,0x18,0x00,0x00,0x00,
  0x18,0x24,0x24,0xFC,0x00,0x00,0x00,
  0x00,0x7C,0x08,0x04,0x00,0x00,0x00,
  0x48,0x54,0x54,0x24,0x00,0x00,0x00,
  0x04,0x7F,0x44,0x00,0x00,0x00,0x00,
  0x3C,0x40,0x40,0x7C,0x00,0x00,0x00,
  0x1C,0x20,0x40,0x20,0x1C,0x00,0x00,
  0x3C,0x40,0x30,0x40,0x3C,0x00,0x00,
  0x44,0x28,0x10,0x28,0x44,0x00,0x00,
  0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00,
  0x44,0x64,0x54,0x4C,0x44,0x00,0x00,
  0x08,0x36,0x41,0x00,0x00,0x00,0x00,
  0x00,0x7F,0x00,0x00,0x00,0x00,0x00,
  0x41,0x36,0x08,0x00,0x00,0x00,0x00,
  0x02,0x01,0x01,0x02,0x01,0x00,0x00,
  0x02,0x05,0x05,0x02,0x00,0x00,0x00
};

